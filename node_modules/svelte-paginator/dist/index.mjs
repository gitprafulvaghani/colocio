function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function null_to_empty(value) {
    return value == null ? '' : value;
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
class HtmlTag {
    constructor(anchor = null) {
        this.a = anchor;
        this.e = this.n = null;
    }
    m(html, target, anchor = null) {
        if (!this.e) {
            this.e = element(target.nodeName);
            this.t = target;
            this.h(html);
        }
        this.i(anchor);
    }
    h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.childNodes);
    }
    i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
            insert(this.t, this.n[i], anchor);
        }
    }
    p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
    }
    d() {
        this.n.forEach(detach);
    }
}

let current_component;
function set_current_component(component) {
    current_component = component;
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/* src/Component.svelte generated by Svelte v3.29.7 */

function add_css() {
	var style = element("style");
	style.id = "svelte-8pwxis-style";
	style.textContent = "button.svelte-8pwxis:enabled{cursor:pointer}.paginator-button.svelte-8pwxis{padding:0.25em 0.5em;min-width:2.5em;border-radius:0px;border:1px solid #ddd;border-left:none}.paginator-current-page.svelte-8pwxis{background-color:#999 !important;border-color:#999 !important;color:white}.paginator-button.svelte-8pwxis:enabled:hover{background-color:#aaa;border-color:#999}.paginator-button.svelte-8pwxis:disabled:hover{background-color:#ddd;border-color:#ccc}.paginator-button.svelte-8pwxis:first-child{border-radius:0.25em 0 0 0.25em;border-left:1px solid #ddd}.paginator-button.svelte-8pwxis:last-child{border-radius:0 0.25em 0.25em 0}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

const get_default_slot_changes = dirty => ({
	items: dirty & /*items*/ 16,
	loading: dirty & /*loading*/ 32
});

const get_default_slot_context = ctx => ({
	items: /*items*/ ctx[4],
	loading: /*loading*/ ctx[5]
});

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

// (149:2) {#each pageLinks as link}
function create_each_block_1(ctx) {
	let button;
	let html_tag;
	let raw_value = /*link*/ ctx[18].text + "";
	let t;
	let button_class_value;
	let button_disabled_value;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[13](/*link*/ ctx[18]);
	}

	return {
		c() {
			button = element("button");
			t = space();
			html_tag = new HtmlTag(t);
			attr(button, "type", "button");

			attr(button, "class", button_class_value = "" + (null_to_empty(/*currentPage*/ ctx[0] == /*link*/ ctx[18].page
			? /*class_current_page*/ ctx[3]
			: /*class_button*/ ctx[1]) + " svelte-8pwxis"));

			button.disabled = button_disabled_value = !/*link*/ ctx[18].page || /*link*/ ctx[18].page == /*currentPage*/ ctx[0];
		},
		m(target, anchor) {
			insert(target, button, anchor);
			html_tag.m(raw_value, button);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*pageLinks*/ 64 && raw_value !== (raw_value = /*link*/ ctx[18].text + "")) html_tag.p(raw_value);

			if (dirty & /*currentPage, pageLinks, class_current_page, class_button*/ 75 && button_class_value !== (button_class_value = "" + (null_to_empty(/*currentPage*/ ctx[0] == /*link*/ ctx[18].page
			? /*class_current_page*/ ctx[3]
			: /*class_button*/ ctx[1]) + " svelte-8pwxis"))) {
				attr(button, "class", button_class_value);
			}

			if (dirty & /*pageLinks, currentPage*/ 65 && button_disabled_value !== (button_disabled_value = !/*link*/ ctx[18].page || /*link*/ ctx[18].page == /*currentPage*/ ctx[0])) {
				button.disabled = button_disabled_value;
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (163:2) {#each pageLinks as link}
function create_each_block(ctx) {
	let button;
	let html_tag;
	let raw_value = /*link*/ ctx[18].text + "";
	let t;
	let button_class_value;
	let button_disabled_value;
	let mounted;
	let dispose;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[14](/*link*/ ctx[18]);
	}

	return {
		c() {
			button = element("button");
			t = space();
			html_tag = new HtmlTag(t);
			attr(button, "type", "button");

			attr(button, "class", button_class_value = "" + (null_to_empty(/*currentPage*/ ctx[0] == /*link*/ ctx[18].page
			? /*class_current_page*/ ctx[3]
			: /*class_button*/ ctx[1]) + " svelte-8pwxis"));

			button.disabled = button_disabled_value = !/*link*/ ctx[18].page || /*link*/ ctx[18].page == /*currentPage*/ ctx[0];
		},
		m(target, anchor) {
			insert(target, button, anchor);
			html_tag.m(raw_value, button);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*pageLinks*/ 64 && raw_value !== (raw_value = /*link*/ ctx[18].text + "")) html_tag.p(raw_value);

			if (dirty & /*currentPage, pageLinks, class_current_page, class_button*/ 75 && button_class_value !== (button_class_value = "" + (null_to_empty(/*currentPage*/ ctx[0] == /*link*/ ctx[18].page
			? /*class_current_page*/ ctx[3]
			: /*class_button*/ ctx[1]) + " svelte-8pwxis"))) {
				attr(button, "class", button_class_value);
			}

			if (dirty & /*pageLinks, currentPage*/ 65 && button_disabled_value !== (button_disabled_value = !/*link*/ ctx[18].page || /*link*/ ctx[18].page == /*currentPage*/ ctx[0])) {
				button.disabled = button_disabled_value;
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div0;
	let div0_class_value;
	let t0;
	let t1;
	let div1;
	let div1_class_value;
	let current;
	let each_value_1 = /*pageLinks*/ ctx[6];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], get_default_slot_context);
	let each_value = /*pageLinks*/ ctx[6];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div0 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t0 = space();
			if (default_slot) default_slot.c();
			t1 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", div0_class_value = "" + (null_to_empty(/*class_button_group*/ ctx[2]) + " svelte-8pwxis"));
			attr(div1, "class", div1_class_value = "" + (null_to_empty(/*class_button_group*/ ctx[2]) + " svelte-8pwxis"));
		},
		m(target, anchor) {
			insert(target, div0, anchor);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div0, null);
			}

			insert(target, t0, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			insert(target, t1, anchor);
			insert(target, div1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*currentPage, pageLinks, class_current_page, class_button*/ 75) {
				each_value_1 = /*pageLinks*/ ctx[6];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (!current || dirty & /*class_button_group*/ 4 && div0_class_value !== (div0_class_value = "" + (null_to_empty(/*class_button_group*/ ctx[2]) + " svelte-8pwxis"))) {
				attr(div0, "class", div0_class_value);
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope, items, loading*/ 2096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[11], dirty, get_default_slot_changes, get_default_slot_context);
				}
			}

			if (dirty & /*currentPage, pageLinks, class_current_page, class_button*/ 75) {
				each_value = /*pageLinks*/ ctx[6];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty & /*class_button_group*/ 4 && div1_class_value !== (div1_class_value = "" + (null_to_empty(/*class_button_group*/ ctx[2]) + " svelte-8pwxis"))) {
				attr(div1, "class", div1_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach(t0);
			if (default_slot) default_slot.d(detaching);
			if (detaching) detach(t1);
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	let { loadItems = (currentPage, perPage) => {
		return { numItems: 0, items: [] };
	} } = $$props;

	let { currentPage = 1 } = $$props;
	let { perPage = 40 } = $$props;
	let { numPageLinks = 9 } = $$props; // Needs to be at least 5 to have enough space for the center buttons

	function reset() {
		$$invalidate(4, items = []);
		$$invalidate(15, numItems = 0);

		if (currentPage == 1) {
			load();
		} else {
			$$invalidate(0, currentPage = 1);
		}
	}

	let { class_button = "paginator-button" } = $$props;
	let { class_button_group = "paginator-button-group" } = $$props;
	let { class_current_page = "paginator-button paginator-current-page" } = $$props;
	let items = [];
	let numItems = 0;
	let loading = true;
	let pageLinks = [];

	async function load() {
		$$invalidate(5, loading = true);
		const response = await loadItems(currentPage, perPage);
		$$invalidate(15, numItems = response.numItems);
		$$invalidate(4, items = response.items);
		$$invalidate(5, loading = false);
	}

	const click_handler = link => {
		if (link.page) {
			$$invalidate(0, currentPage = link.page);
		}
	};

	const click_handler_1 = link => {
		if (link.page) {
			$$invalidate(0, currentPage = link.page);
		}
	};

	$$self.$$set = $$props => {
		if ("loadItems" in $$props) $$invalidate(7, loadItems = $$props.loadItems);
		if ("currentPage" in $$props) $$invalidate(0, currentPage = $$props.currentPage);
		if ("perPage" in $$props) $$invalidate(8, perPage = $$props.perPage);
		if ("numPageLinks" in $$props) $$invalidate(9, numPageLinks = $$props.numPageLinks);
		if ("class_button" in $$props) $$invalidate(1, class_button = $$props.class_button);
		if ("class_button_group" in $$props) $$invalidate(2, class_button_group = $$props.class_button_group);
		if ("class_current_page" in $$props) $$invalidate(3, class_current_page = $$props.class_current_page);
		if ("$$scope" in $$props) $$invalidate(11, $$scope = $$props.$$scope);
	};

	let numPages;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*numItems, perPage*/ 33024) {
			 $$invalidate(16, numPages = Math.ceil(numItems / perPage));
		}

		if ($$self.$$.dirty & /*currentPage, numPages, numPageLinks*/ 66049) {
			 {
				const linkArr = [];

				linkArr.push({
					text: "&laquo;",
					page: currentPage > 1 ? currentPage - 1 : null
				});

				if (numPages <= numPageLinks) {
					// If there are more than enough slots for the total number of pages, just list all the pages
					for (let i = 1; i <= numPages; i++) {
						linkArr.push({ text: i, page: i });
					}
				} else {
					// If there are less than 7 total links, show only the first and last pages on the sides
					// and leave the remaining slots for the middle pages. If there's more than 7 links, make
					// this look a little nicer by showing the first & second and the last two pages.
					//
					// Example with 7 links:
					// 1 … 4 5 6 … 10
					//
					// Example with 9 links:
					// 1 2 … 4 5 6 … 9 10
					const numEachSideLinks = numPageLinks > 7 ? 2 : 1;

					const numMidLinks = numPageLinks - 2 * numEachSideLinks;

					// Put in the left-side links
					for (let i = 1; i <= numEachSideLinks; i++) {
						linkArr.push({ text: i, page: i });
					}

					// We want to always display the current page and as many pages next to it as possible.
					const numLeftMidPages = Math.ceil((numMidLinks - 3) / 2);

					const numRightMidPages = Math.floor((numMidLinks - 3) / 2);

					// Figure out where to put "..." into the list of pages. This may happen in one or two locations
					// (not 0, since that is handled above where numPages <= numPageLinks)
					const hasLeftEllipsis = currentPage - numLeftMidPages > numEachSideLinks + 2;

					const hasRightEllipsis = currentPage + numRightMidPages < numPages - numEachSideLinks - 1;

					if (hasLeftEllipsis) {
						linkArr.push({ text: "..." });
					}

					// Start & end for middle pages
					const midStartPage = hasLeftEllipsis
					? hasRightEllipsis
						? currentPage - numLeftMidPages
						: numPages - numEachSideLinks - numMidLinks + 2
					: numEachSideLinks + 1;

					const midEndPage = hasRightEllipsis
					? midStartPage + numMidLinks - (hasLeftEllipsis ? 3 : 2)
					: numPages - numEachSideLinks;

					for (let i = midStartPage; i <= midEndPage; i++) {
						linkArr.push({ text: i, page: i });
					}

					if (hasRightEllipsis) {
						linkArr.push({ text: "..." });
					}

					// Put in the right-side links
					for (let i = numPages - numEachSideLinks + 1; i <= numPages; i++) {
						linkArr.push({ text: i, page: i });
					}
				}

				linkArr.push({
					text: "&raquo;",
					page: currentPage < numPages ? currentPage + 1 : null
				});

				$$invalidate(6, pageLinks = linkArr);
			}
		}

		if ($$self.$$.dirty & /*currentPage*/ 1) {
			// This causes load to be loaded on load, so no need for onMount
			 currentPage && load();
		}
	};

	return [
		currentPage,
		class_button,
		class_button_group,
		class_current_page,
		items,
		loading,
		pageLinks,
		loadItems,
		perPage,
		numPageLinks,
		reset,
		$$scope,
		slots,
		click_handler,
		click_handler_1
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-8pwxis-style")) add_css();

		init(this, options, instance, create_fragment, safe_not_equal, {
			loadItems: 7,
			currentPage: 0,
			perPage: 8,
			numPageLinks: 9,
			reset: 10,
			class_button: 1,
			class_button_group: 2,
			class_current_page: 3
		});
	}

	get reset() {
		return this.$$.ctx[10];
	}
}

export default Component;
