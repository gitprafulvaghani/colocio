/** @typedef {typeof __propDef.props}  ButtonProps */
/** @typedef {typeof __propDef.events}  ButtonEvents */
/** @typedef {typeof __propDef.slots}  ButtonSlots */
export default class Button extends SvelteComponentTyped<{
    [x: string]: any;
    active?: boolean | undefined;
    color?: null | undefined;
    toggle?: boolean | undefined;
    style?: null | undefined;
    class?: string | undefined;
    ripple?: boolean | undefined;
    icon?: boolean | undefined;
    fab?: boolean | undefined;
    dense?: boolean | undefined;
    raised?: boolean | undefined;
    unelevated?: boolean | undefined;
    outlined?: boolean | undefined;
    shaped?: boolean | undefined;
    fullWidth?: boolean | undefined;
}, {
    click: MouseEvent;
    mousedown: MouseEvent;
    mouseup: MouseEvent;
    mouseover: MouseEvent;
    mouseout: MouseEvent;
    mousemove: MouseEvent;
    dblclick: MouseEvent;
    contextmenu: MouseEvent;
    mouseenter: MouseEvent;
    mouseleave: MouseEvent;
    focus: FocusEvent;
    blur: FocusEvent;
    change: CustomEvent<any>;
} & {
    [evt: string]: CustomEvent<any>;
}, {
    default: {};
}> {
}
export type ButtonProps = typeof __propDef.props;
export type ButtonEvents = typeof __propDef.events;
export type ButtonSlots = typeof __propDef.slots;
import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        [x: string]: any;
        active?: boolean | undefined;
        color?: null | undefined;
        toggle?: boolean | undefined;
        style?: null | undefined;
        class?: string | undefined;
        ripple?: boolean | undefined;
        icon?: boolean | undefined;
        fab?: boolean | undefined;
        dense?: boolean | undefined;
        raised?: boolean | undefined;
        unelevated?: boolean | undefined;
        outlined?: boolean | undefined;
        shaped?: boolean | undefined;
        fullWidth?: boolean | undefined;
    };
    events: {
        click: MouseEvent;
        mousedown: MouseEvent;
        mouseup: MouseEvent;
        mouseover: MouseEvent;
        mouseout: MouseEvent;
        mousemove: MouseEvent;
        dblclick: MouseEvent;
        contextmenu: MouseEvent;
        mouseenter: MouseEvent;
        mouseleave: MouseEvent;
        focus: FocusEvent;
        blur: FocusEvent;
        change: CustomEvent<any>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {};
    };
};
export {};
